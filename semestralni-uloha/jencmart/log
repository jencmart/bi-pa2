==8070== Memcheck, a memory error detector
==8070== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==8070== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info
==8070== Command: ./jencmart
==8070== 
==8070== Invalid read of size 8
==8070==    at 0x409A4E: std::__cxx11::list<Ant*, std::allocator<Ant*> >::begin() (stl_list.h:841)
==8070==    by 0x41F4AC: Command::Process() (command.cpp:20)
==8070==    by 0x407142: Game::ProcessCommandsByOneStep() (game.cpp:131)
==8070==    by 0x406F27: Game::Loop() (game.cpp:80)
==8070==    by 0x42050F: GameWrapper::run() (gameWrapper.cpp:38)
==8070==    by 0x402EC8: main (main.cpp:33)
==8070==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==8070== 
==8070== 
==8070== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==8070==  Access not within mapped region at address 0x8
==8070==    at 0x409A4E: std::__cxx11::list<Ant*, std::allocator<Ant*> >::begin() (stl_list.h:841)
==8070==    by 0x41F4AC: Command::Process() (command.cpp:20)
==8070==    by 0x407142: Game::ProcessCommandsByOneStep() (game.cpp:131)
==8070==    by 0x406F27: Game::Loop() (game.cpp:80)
==8070==    by 0x42050F: GameWrapper::run() (gameWrapper.cpp:38)
==8070==    by 0x402EC8: main (main.cpp:33)
==8070==  If you believe this happened as a result of a stack
==8070==  overflow in your program's main thread (unlikely but
==8070==  possible), you can try to increase the size of the
==8070==  main thread stack using the --main-stacksize= flag.
==8070==  The main thread stack size used in this run was 8388608.
==8070== 
==8070== HEAP SUMMARY:
==8070==     in use at exit: 2,089,830 bytes in 1,392 blocks
==8070==   total heap usage: 9,141 allocs, 7,749 frees, 2,479,846 bytes allocated
==8070== 
==8070== LEAK SUMMARY:
==8070==    definitely lost: 0 bytes in 0 blocks
==8070==    indirectly lost: 0 bytes in 0 blocks
==8070==      possibly lost: 0 bytes in 0 blocks
==8070==    still reachable: 2,089,830 bytes in 1,392 blocks
==8070==         suppressed: 0 bytes in 0 blocks
==8070== Rerun with --leak-check=full to see details of leaked memory
==8070== 
==8070== For counts of detected and suppressed errors, rerun with: -v
==8070== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
